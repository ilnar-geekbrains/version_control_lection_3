# Инструкция по работе с Git

Репозиторий Git — это виртуальное хранилище проекта. В нем можно хранить версии кода для доступа по мере необходимости.

# Знакомство с пользователем

Для знакомства с пользователем нужно представиться Git.

Для этого нужно ввести свое имя пользователя при помощи команды  
git config user.name <ввести свое имя>

и дополнительно ввести команду для отображения почты пользователя 
git config user.email <ввести свою почту>

# Создание репозитория, добавление файла, сохранение файла и добавление коммита

Создадим наш первый репозиторий. Для этого пройдите в папку вашего проекта и откройте ее через проводник.

Далее введите команду
git init
Теперь Git отслеживает изменения файлов вашего проекта. Но, так как вы только создали репозиторий в нем нет вашего кода. Для этого необходимо создать commit.

Создайте в Проводнике новый файл

Добавим все файлы проекта в нам будующий commit. Для этого введем команду
git add .
или
git add --all

Если хотим добавить конкретный файл то можно так
git add <имя_файла> 

Теперь создаем commit. Обязательно указываем комментарий.
И не забываем про кавычки
git commit -m "<комментарий>"
Отлично. Вы создали свой первый репозиторий и заполнили его первым commit.

# Проверка логов

Теперь сделаем изменения в коде и попробуем их снова опубликовать. Перейдите во вкладку с файлами, отредактируйте какой-нибудь файл, не забудьте нажать crtl+s (Windows) или cmd+s (MacOS), чтобы сохранить файл. Вернитесь обратно во вкладу управления Git.

Для того, чтобы посмотреть уже существующие или ранее сделанные коммиты, нужно вывести список всех коммитов в этой ветке. Для этого набираем команду
git log 
и видим все необходимые коммиты

для перехода между коммитами наберите команду
git checkout <первые четыре цифры нужного коммита>

# Ветки

Ветка - это набор commit (кружок), которые идут друг за другом. У ветки есть название, основную ветку чаще всего называют master (на картинках будет называться main) . Если говорить простыми словами, то ветка master - это наш проект.

## Создание веток

Чтобы создать новую ветку из текущей мы вводим команду
git branch <название новой ветки>

## Переход между ветками

Чтобы перейти между созданными ветками вводим
git checkout <нужное нам название ветки для перехода>

для возврата в ветку master
git checkout master

Если мы хотим создать новую ветку и сразу перейти на нее, то выбираем команду
git checkout -b <наименование новой ветки>

## Объединение веток и конфликты

Для объединения веток сначала перейдите в ветку master или любую другую, в которую нужно сохранить изменение из другой ветки
Далее вводим команду
git merge <название ветки, информацию из которой вливаем в нужную ветку>

Если возникнет конфликт, то можем выбрать, какой из вариантов сохранить, например, верхнеуровневую ветку с информацией, нижнеуровневую ветку с информацией или изменения из обоих файлов.

Далее сохранить и закоммитить сохранение верхнеуровневой ветки.

## Удаление веток

Чтобы удалить ветку, введите команду
git branch -d <название удаляемой ветки>

# Работа с удаленным репозиторием

## Копирование чужого репозитория и передача в него данных для merge

Сначала мы копируем чужой репозиторий к себе на GitHub.

Далее команда git clone <ссылка на клонируемый репозиторий> позволяет скопировать в нужную нам папку репозиторий, который нам нужен, на локальный ресурс. Это будет полная копия внешнего репозитория, который лежит у Вас на GitHub.

Только после копирования репозитория в нашу папку нужно перейти в папку самого нового репозитория командой 
cd <название папки нового репозитория, где будем работать>

Далее все изменения вносим уже на своей локальной версии в отдельно созданной ветке.

## Создание собственного репозитория и работа с ним с разных устройств

Создаем свой удаленный репозиторий на GitHub
Копируем поочереди те строчки кода, которые он нам дает для связывания его с локальными устройствами.

Корректируем файл как нам нужно.

Для передачи данных в удаленный репозиторий:
1. Сохраняем своей коммит в новой ветке. 
2. Командой git push передаем изменения в привязанный удаленный репозиторий

Обратный порядок тоже работает.
Можно сохранить коммит в удаленном репозитории и ввести команду git pull, которая вытянет из связанного репозитория новые данные на локальную версию.

## Передача своего репозитория

Закидываем свои изменения на свой GitHub и там появляется кнопка Fork для связывания вашей версии документа и версии владельца. После этого владелец сможет увидеть ваши изменения в его файле 
